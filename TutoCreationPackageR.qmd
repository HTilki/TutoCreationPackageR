---
title: "**Tuto Cr√©ation Package R**"
subtitle: "Les bases √† absolument conna√Ætre !"
toc: true
toc-title: üìö Table des mati√®res
lang: fr
number-sections: true
author:
  - name: "[*Hassan TILKI*](https://github.com/HTilki)"
    affiliation: 
      - name: Universit√© de Tours
        url: https://www.univ-tours.fr/
date: today
date-format: short
include-in-header: 
    - text: | 
        <link href='https://fonts.googleapis.com/css?family=Fira Code' rel='stylesheet'>
format: 
  html: 
    theme: simplex
    monofont: "Fira Code"
    fontsize: 1em
    embed-resources: true
    code-fold: false 
    anchor-sections: true
    smooth-scroll: true
    citations-hover: true
    footnotes-hover: true
    link-external-icon: true
    link-external-newwindow: true
code-block-bg: "#F1F3F5"
code-block-border-left: "#d9230f"
editor_options: 
    chunk_output_type: console
---

```{css, echo=FALSE}
.img-block {
    margin: auto;
    width: 85%;
    padding: 10px;
    text-align: center;
}
.img-block img {
    display: inline-block;
    margin: auto;
    max-width: 100%;
}

```

------------------------------------------------------------------------

::: img-block
<br> <img src="imgs/MECEN_logo.png" alt="MECEN Logo" style="width: 30%;"/> <img src="imgs/UT_logo.jpg" alt="UT Logo" style="width: 45%;"/>
:::

------------------------------------------------------------------------

```{r setup, include=FALSE}
knitr::opts_chunk$set(eval = FALSE)
```

## Introduction

### Pourquoi cr√©er un package ?

Cr√©er un package sur R pr√©sente plusieurs avantages :

-   **Accessibilit√© des fonctions** : Les utilisateurs peuvent facilement acc√©der aux fonctions que vous avez d√©velopp√©es en chargeant simplement le package.

-   **Facilit√© de chargement** : Ne plus avoir √† utiliser la fonction `source()` pour charger des fonctions individuelles, simplifiant ainsi le processus.

-   **Documentation** : La possibilit√© d'ajouter une documentation compl√®te pour les fonctions et les param√®tres, facilitant ainsi leur utilisation et leur compr√©hension.

-   **Partage facile** : Permet de partager facilement votre travail avec des coll√®gues ou la communaut√© R, favorisant ainsi la collaboration et la reproductibilit√©.

### D√©pendances n√©cessaires

Avant de commencer √† cr√©er un package, assurez-vous d'avoir install√© les packages suivants, qui sont indispensables pour le processus :

-   **devtools** : Pour faciliter le d√©veloppement et le d√©ploiement de packages R.

-   **roxygen2** : Pour g√©n√©rer automatiquement la documentation √† partir des commentaires dans le code source.

-   **usethis** : Pour automatiser plusieurs t√¢ches li√©es au d√©veloppement de packages, telles que la cr√©ation de fichiers et la gestion des d√©pendances.

-   D'autre packages existent, √† vous de les d√©couvrir !

## Inititalisation du package

L'initialisation d'un package sur R est une √©tape cruciale pour commencer un projet de d√©veloppement. Pour ce faire, on peut utiliser une s√©rie de fonctions facilitant la cr√©ation et la configuration de la structure du package. 

Tout d'abord, on peut utiliser la fonction `usethis::create_package()` pour cr√©er un dossier d√©di√© au package. Ce dossier comprendra un sous-dossier "R" contenant les fichiers de code, ainsi qu'un fichier "DESCRIPTION" contenant les m√©tadonn√©es importantes du package.

Ensuite, pour une gestion de version efficace et une collaboration simplifi√©e, on peut initialiser un d√©p√¥t GitHub en utilisant la fonction `usethis::use_git()`. Cela permettra de versionner le code et de le partager facilement avec d'autres personnes.

Pour assurer une clart√© et une accessibilit√© maximales pour les utilisateurs du package, on peut g√©n√©rer un fichier README pr√©rempli en utilisant la fonction `usethis::use_readme_md()`. Ce fichier README servira de point d'entr√©e pour les utilisateurs, leur fournissant des informations importantes sur l'installation, l'utilisation et les fonctionnalit√©s du package.

Enfin, pour d√©finir la licence de votre package, on peut utiliser la fonction `usethis::use_..._license()`. Cela garantira une utilisation appropri√©e du code par d'autres utilisateurs.

En utilisant ces fonctions d'initialisation, on peut rapidement mettre en place la structure du package R et commencer le d√©veloppement en toute confiance.

## Le contenu d'un package

### Les fonctions

Dans cette partie, nous allons commencer √† cr√©er notre package en d√©veloppant des fonctions.

Cr√©ons une fonction simple permettant de r√©aliser le produit entre deux nombres.

On va cr√©er un fichier produit.R avec le package `usethis` qui va contenir la fonction suivante :

```{r}
usethis::use_r("produit.R") # Pour cr√©er le fichier produit.R
```

Dans ce fichier on √©cris la fonction suivante :

```{r}
produit <- function(a, b) {
  return(a * b)
}
```

En tant normal si l'on veut utiliser une fonction pr√©sente dans un autre fichier R on peut utiliser la fonction `source("nom_du_fichier.R")`, qui va tout simplement executer le code R pr√©sent dans le fichier. Le code et tout ce qu'il contient (objets, fonctions...) se retrouve finalement dans l'environnement globale ou charg√©e (pour les packages).

Cette m√©thode, bien qu'utile dans certains cas, ne poss√®de pas les avantages d'un package comme la documentation.

### La documentation

D'ailleurs en parlant de documentation, comment la renseigne t-on ?

Pour documenter une fonction, on peut utiliser la syntaxe Roxygen2 dans le code source de la fonction. Voici un exemple de documentation pour la fonction `produit()` :

```{r}
#' Calculer le produit de deux nombres
#'
#' Cette fonction prend deux nombres en entr√©e et retourne leur produit.
#'
#' @param a Le premier nombre √† multiplier
#' @param b Le deuxi√®me nombre √† multiplier
#'
#' @return Le produit de \code{a} et \code{b}
#'
#' @examples
#' produit(2, 3) # Renvoie 6
#' produit(5, -4) # Renvoie -20
#'
#' @export
produit <- function(a, b) {
  return(a * b)
}
```

Dans cette documentation Roxygen2 :

La premi√®re ligne est une sorte de titre pour la fonction. La deuxi√®me correspond √† la description de la fonction.

-   `#'` est utilis√© pour indiquer le d√©but d'un commentaire de documentation Roxygen2.
-   Les lignes qui commencent par `#' @` sont des balises Roxygen2 qui d√©finissent diff√©rents aspects de la documentation.
-   `\code{}` est utilis√© pour indiquer du texte en code dans la documentation.
-   `@param` est utilis√© pour d√©crire les param√®tres de la fonction.
-   `@return` est utilis√© pour d√©crire la valeur renvoy√©e par la fonction.
-   `@examples` est utilis√© pour fournir des exemples d'utilisation de la fonction.
-   `@export` indique que la fonction doit √™tre export√©e pour √™tre accessible √† partir du package.
-   Il en existe bien d'autres !

Une fois la documentation bien renseign√©, il suffit d'executer la fonction `roxygen2::roxygenise()` ou la fonction `devtools::document()` qui est un wrapper de la fonction issue de `roxygen2`.
Ces fonctions analysent les commentaires de documentation Roxygen2 pr√©sents dans votre code source, situ√© dans le dossier *R*, et g√©n√®rent automatiquement les fichiers de documentation au format Rd (R documentation) dans un dossier *man*. 


### Les tests de fonctions

Avant de r√©diger des tests, on peut utiliser les fonctions du package sans les importer dans l'environnement global √† l'aide de la fonction `devtools::load_all()`.

On peut tester nos fonctions √† l'aide du package testthat qui est tr√®s bien construit et document√© !

Voici un exemple ici sur la fonction produit :

```{r}
testthat::test_that(desc = "multiplication fonctionne", 
                    code = {
                      A = 2
                      B = 5
                      testthat::expect_equal(produit(A, B), 10)
                    }
)
```

Une fois que l'on a fini d'√©crire le test, on peut v√©rifier qu'il fonctionne bien en le testant !

Pour ce faire, la fonction `devtools::test()` ex√©cute tous les tests situ√©s dans le dossier tests/testthat. Toute modification apport√©e au code doit √™tre suivie de l'ex√©cution de `devtools::test()` pour s'assurer que l'on ne casse pas les fonctionnalit√©s existantes.

### Inclure une base de donn√©es

Il existe plusieurs fa√ßon d'int√©grer des bases de donn√©es √† un package R mais la plus commun√©ment utilis√© est la suivante :

Avoir un fichier R dans un dossier data-raw qui contient le code permettant de cr√©er / obtenir / nettoyer la base finale. Par exemple :

```{r}
nom_voiture <- mtcars |> rownames() |> dplyr::as_tibble() |> dplyr::rename(nom = value)
usethis::use_data(nom_voiture)
```

La fonction use_data permet de cr√©er un dossier data et de stocker la base data_nom_voiture dans un fichier *.rda* portant le m√™me nom.

On peut penser que l'on en a fini avec cette base de donn√©es mais on peut (et il est aussi recommand√©) de la documenter afin d'am√©liorer l'exp√©rience des utilisateurs. Le tout en utilisant le m√™me principe qu'avec une fonction R.

Dans le dossier R, on a un fichier data.R qui contient :

```{r}
#' Noms des voitures
#'
#' Ce jeu de donn√©es contient les noms des voitures √† partir du jeu de donn√©es mtcars.
#'
#' @format Un data frame avec une seule colonne :
#'   \describe{
#'     \item{nom}{Le nom de la voiture.}
#'   }
#' @source mtcars dataset
#'
#' @examples
#' head(data_nom_voiture)
#'
#' @keywords datasets
"data_nom_voiture"

```

Une fois la documentation renseign√©e, on peut √† nouveau et de la m√™me mani√®re qu'avec un script de fonction, executer la fonction `devtools::document()` afin de mettre √† jour la documentation du package.

### La description du package

La section "DESCRIPTION" dans un package R est cruciale car elle fournit des informations essentielles sur le package, telles que son nom, sa version, son auteur et sa licence. Le fichier DESCRIPTION est l'endroit o√π ces informations sont stock√©es. En utilisant des fonctions telles que `usethis::edit_file("DESCRIPTION")`, vous pouvez facilement cr√©er ou modifier ce fichier. Il est √©galement recommand√© d'utiliser des fonctions telles que `usethis::use_package()` pour ajouter des d√©pendances et `usethis::use_author()` pour sp√©cifier les informations sur l'auteur. En r√©sum√©, le fichier DESCRIPTION et les fonctions associ√©es sont essentiels pour maintenir la structure et la qualit√© du package.

```{r}
usethis::edit_file("DESCRIPTION") # Pour cr√©er ou modifier le fichier DESCRIPTION
usethis::use_package("dplyr", type = "Imports") # Pour ajouter des d√©pendances
usethis::use_author(
  given = "Pr√©nom",
  family = "Nom",
  role = c("aut", "cre"),
  email = "monmail@example.com"
)
```

## Exporter le package

Apr√®s avoir effectu√© des v√©rifications avec `devtools::check()` et confirm√© l'absence de warnings ou d'erreurs, l'utilisation de `devtools::build()` est n√©cessaire pour construire et exporter le package dans un fichier tar.gz. De plus, il existe d'autre option pour le d√©ploiement du package. On peut en effet les d√©ployer sur le CRAN, ou sur Github.

## Utiliser le package

Il existe plusieurs m√©thodes pour importer un package. Tout d'abord, on peut l'installer √† partir d'un fichier tar.gz ou directement depuis le CRAN en utilisant la fonction `install.package('nom_du_package', ...)`. Alternativement, on peut l'installer √† partir de GitHub en utilisant la fonction `devtools::install_github("nomdurepos")`. Ces options offrent une flexibilit√© dans l'installation des packages, permettant √† chacun de choisir la m√©thode qui lui convient le mieux en fonction de ses besoins et de ses pr√©f√©rences.

Pour l'utiliser ensuite, on peut soit l'importer avec `library('nomdupackage')` ou en ne chargeant pas le package en entier, mais en utilisant une fonction sp√©cifique avec `package::fonction()`.

## Maintenir le package

[![](https://r-pkgs.org/diagrams/workflow.png){fig-align="center" width="568"}](https://r-pkgs.org/)

Apr√®s avoir ajout√© de nouvelles fonctionnalit√©s, il est essentiel de tester le package en utilisant `devtools::load_all()` et `devtools::check()`. Ensuite, on peut ajouter une documentation d√©taill√©e avec `document()` pour guider les utilisateurs sur l'utilisation du package. Pour mettre √† jour le package, on peut aussi actualiser le d√©p√¥t GitHub ou reconstruire le package avec `devtools::build()`. On peut √©galement utiliser `usethis` pour cr√©er des notes de version et effectuer des mises √† jour mineures ou majeures. Les possibilit√©s de cr√©ation, personnalisation, modification, test et maintenance d'un package sur R sont pratiquement infinies. Cet aper√ßu a r√©sum√© les fonctionnalit√©s essentielles pour bien d√©marrer, mais je vous recommande de consulter la [documentation officielle](https://r-pkgs.org/) pour plus de d√©tails.

